= Rodauth

Rodauth is an authentication and account management framework for
rack applications.  It's built using Roda and Sequel, but it can
be used with other web frameworks, database libraries, and databases.
When used with PostgreSQL in the default configuration, it offers
additional security for password hashes by protecting access via
database functions.

== Design Goals

* Security: Ship in a maximum security by default configuration
* Simplicity: Allow for easy configuration via a DSL
* Flexibility: Allow for easy overriding of any part of the framework

== Features

* Login
* Logout
* Change Password
* Change Login
* Reset Password
* Create Account
* Close Account
* Verify Account
* Remember (Autologin via token)
* Lockout (Bruteforce protection)

== Resources

Website :: http://rodauth.jeremyevans.net
Demo Site :: http://rodauth-demo.jeremyevans.net
Source :: http://github.com/jeremyevans/rodauth
Bugs :: http://github.com/jeremyevans/rodauth/issues
Google Group :: https://groups.google.com/forum/#!forum/rodauth
IRC :: irc://chat.freenode.net/#rodauth

== Security

=== Password Hash Access Via Database Functions

By default on PostgreSQL and MySQL, Rodauth uses database functions to
access password hashes, with the user running the application
unable to get direct access to password hashes.  This reduces the
risk of an attacker being able to access password hashes and use them
to attack other sites.

The rest of this section describes this feature in more detail, but
note that Rodauth does not require this feature be used and works
correctly without it.  There may be cases where you cannot use
this feature, such as when using a different database or when you
do not have full control over the database you are using.

Passwords are hashed using bcrypt, and the password hashes are
kept in a separate table from the accounts table, with a foreign key
referencing the accounts table.  Two PostgreSQL functions are added,
one to retrieve the salt for a password, and the other to check
if a given password hash matches the password hash for the user.

A separate database account owns the table containing the password
hashes, which the application database account cannot access.
The application database account has the ability to execute the
functions to get the salt and check the password hash, but not the
ability to access the password hashes directly, making it much more
difficult for an attacker to access the password hashes even if they
are able to exploit an SQL injection or remote code execution
vulnerability in the application.  Even if an attacker was able to
exploit a vulnerability in the application, the only additional
information they would have is the salt for the password, which
is much less sensitive than the entire password hash.

While the application database account is not be able to read
password hashes, it is still be able to insert password hashes,
update passwords hashes, and delete password hashes, so the
additional security is not that painful.

The reason for extra security in regards to password hashes stems from
the fact that people tend to reuse passwords, so a compromise of one
database containing password hashes can result in account access on
other sites, making password hash storage of critical importance even
if the other data stored is not that important.

If you are storing other important information in your database, you
should consider using a similar approach in other areas (or all areas)
of your application.

=== Tokens

Account verification, password resets, remember, and lockout tokens
all use a similar approach.  They all provide a token, in the format
"account-id_long-random-string".  By including the id of the account
in the token, an attacker can only attempt to bruteforce the token
for a single account, instead of being able to bruteforce tokens for
all accounts at once (which would be possible if the token was just a
random string).

There is a maximum of 1 token per account for each of these features
at a time. This prevents attackers from creating an arbitrary number
of requests in order to make bruteforcing easier.

Additionally, all comparisons of tokens use a timing-safe comparison
function to reduce the risk of timing attacks.

== Database Setup

In order to get full advantages of Rodauth's security design on PostgreSQL,
multiple database accounts are involved:

1) database superuser account (usually postgres)
2) application database account
3) secondary database account

The database superuser account is used to load extensions related to the
database.  The application should never be run using the database
superuser account.

Note that there is not a simple way to use multiple database accounts in
the same PostgreSQL database on Heroku.  You can still use Rodauth on
Heroku, it just won't have the same security benefits.  That's not to say
it is insecure, just that it drops the security level for password hash
storage to the same level as other common authentication solutions.

=== Load extensions (on PostgreSQL)

If you want to use the login features for Rodauth, you need to load the
citext extension if you want to support case insensitive logins.

Example:

  psql -U postgres -c "CREATE EXTENSION citext" $database_name

Note that on Heroku, this extension can be loaded using a standard database
account.  If you don't want to support case sensitive logins, you don't
need to use the PostgreSQL citext extension.

=== Create database accounts

If you are currently running your application using the database superuser
account, the first thing you need to do is to create a database account for
the application.  It's often best to name this account the same as the
database name.

You should also create a second database account which will own the password
hash table.

Example for PostgreSQL:

  createuser -U postgres $database_name
  createuser -U postgres $database_name_password_hashes

Note that if the database superuser account owns all of the items in the
database, you'll need to change the ownership to the database account you
just created.  See https://gist.github.com/jeremyevans/8483320
for a way to do that.

=== Create tables

Because two different database accounts are used, two different migrations
are required, one for each database account.  Here are example migrations.
You can modify them to add support for additional columns, or remove tables
or columns related to features that you don't need.

First migration, run using the application database account:

  require 'rodauth/migrations'
  
  Sequel.migration do
    up do
      extension :date_arithmetic

      # Used by the account verification and close account features
      create_table(:account_statuses) do
        Integer :id, :primary_key=>true
        String :name, :null=>false, :unique=>true
      end
      from(:account_statuses).import([:id, :name], [[1, 'Unverified'], [2, 'Verified'], [3, 'Closed']])

      db = self
      create_table(:accounts) do
        primary_key :id, :type=>Bignum
        foreign_key :status_id, :account_statuses, :null=>false, :default=>1
        if db.database_type == :postgres
          citext :email, :null=>false
        else
          String :email, :null=>false
        end

        if db.database_type == :postgres
          constraint :valid_email, :email=>/^[^,;@ \r\n]+@[^,@; \r\n]+\.[^,@; \r\n]+$/
          index :email, :unique=>true, :where=>{:status_id=>[1, 2]}
        end
      end

      deadline_opts = proc do |days|
        if database_type == :mysql
          {:null=>false}
        else
          {:null=>false, :default=>Sequel.date_add(Sequel::CURRENT_TIMESTAMP, :days=>days)}
        end
      end

      # Used by the password reset feature
      create_table(:account_password_reset_keys) do
        foreign_key :id, :accounts, :primary_key=>true, :type=>Bignum
        String :key, :null=>false
        DateTime :deadline, deadline_opts[1]
      end

      # Used by the account verification feature
      create_table(:account_verification_keys) do
        foreign_key :id, :accounts, :primary_key=>true, :type=>Bignum
        String :key, :null=>false
      end

      # Used by the remember me feature
      create_table(:account_remember_keys) do
        foreign_key :id, :accounts, :primary_key=>true, :type=>Bignum
        String :key, :null=>false
        DateTime :deadline, deadline_opts[14]
      end

      # Used by the lockout feature
      create_table(:account_login_failures) do
        foreign_key :id, :accounts, :primary_key=>true, :type=>Bignum
        Integer :number, :null=>false, :default=>1
      end
      create_table(:account_lockouts) do
        foreign_key :id, :accounts, :primary_key=>true, :type=>Bignum
        String :key, :null=>false
        DateTime :deadline, deadline_opts[1]
      end

      Rodauth.set_account_table_reference_permissions(self)
    end

    down do
      drop_table(:account_lockouts, :account_login_failures, :account_remember_keys, :account_verification_keys, :account_password_reset_keys, :accounts, :account_statuses)
    end
  end

Second migration, run using the secondary database account:

  require 'rodauth/migrations'
  
  Sequel.migration do
    up do
      # Used by the login and change password features
      create_table(:account_password_hashes) do
        foreign_key :id, :accounts, :primary_key=>true, :type=>Bignum
        String :password_hash, :null=>false
      end

      Rodauth.create_database_authentication_functions(self)
      Rodauth.set_database_authentication_function_permissions(self)
    end

    down do
      Rodauth.drop_database_authentication_functions(self)
      drop_table(:account_password_hashes)
    end
  end

To support multiple separate migration users, you can run the migration
for the password user using Sequel's migration API: 

  Sequel.extension :migration
  Sequel.postgres('DATABASE_NAME', :user=>'PASSWORD_USER_NAME') do |db|
    Sequel::Migrator.run(db, 'path/to/password_user/migrations', :table=>'schema_info_password')
  end

If the database is not PostgreSQL or MySQL, or you cannot use multiple user
accounts, just combine the two migrations into a single migration.

One thing to notice in the above migrations is that Rodauth uses additional
tables for additional features, instead of additional columns in a single
table.

=== MySQL issues

If you are using MySQL, you need to GRANT/REVOKE permissions appropriately.
The app user needs to be GRANTed the ability to INSERT, UPDATE, and DELETE the
account_password_hashes table, but have the ability to SELECT from the table
REVOKEd.  Additionally, the app user needs to be able to EXECUTE the
<tt>rodauth_get_salt(int8)</tt> and <tt>rodauth_valid_password_hash(int8, varchar(255))</tt>.
Rodauth handles permissions on PostgreSQL automatically in the above migrations,
but MySQL's less flexible GRANT/REVOKE support means that Rodauth cannot
automatically handle permissions on MySQL.

Additionally, adding the functions on MySQL may require setting the 
<tt>log_bin_trust_function_creators=1</tt> setting in the MySQL configuration.

== Usage

=== Basic Usage

Rodauth is a Roda plugin and loaded the same way other Roda plugins
are loaded:

  plugin :rodauth do
  end

The block passed to the plugin call uses the Rodauth configuration DSL.
The one configuration method that should always be used is +enable+,
which chooses which features you would like to load:

  plugin :rodauth do
    enable :login, :logout
  end

Once features are loaded, you can use any of the configuration methods
supported by the features.  There are two types of configuration
methods.  The first type are called auth methods, and they take a
block which overrides the default method that Rodauth uses.  Inside the
block, you can call super if you want to get the default behavior.  For
example, if you want to add additional logging when a user logs in:

  plugin :rodauth do
    enable :login, :logout
    after_login do
      logger.info "#{account.email} logged in!"
      super()
    end
  end

Inside the block, you are in the context of the Rodauth::Auth
instance related to the request.  This object has access to everything
related to the request via methods:

request :: RodaRequest instance
response :: RodaResponse instance
scope :: Roda instance
session :: session hash
flash :: flash message hash
account :: account model instance (if set by an earlier Rodauth method)

So if you want to log the IP address for the user during login:

  plugin :rodauth do
    enable :login, :logout
    after_login do
      logger.info "#{account.email} logged in from #{request.ip}"
      super
    end
  end

The second type of configuration methods are called auth value
methods.  They are similar to auth methods, but instead of just
accepting a block, they can optionally accept a single argument
without a block, which will be treated as a block that just returns
that value.  For example, the account_model method sets the model
class to use for the account, so to override it, you can call the
method with another class:

  plugin :rodauth do
    enable :login, :logout
    account_model User
  end

Note that all auth value methods can still take a block, allowing
per-request overriding for all behavior:

  plugin :rodauth do
    enable :login, :logout
    account_model do
      request.path_info =~ /\A\/admin/ ? AdminUser : User
    end
  end

By allowing every configuration method to take a block, Rodauth
should be flexible enough to integrate into most legacy systems.

=== Feature Documentation

The options/methods for the supported features are listed on a
separate page per feature.  If these links are not active, please
view the appropriate file in the doc directory.

* {Base}[rdoc-ref:doc/base.rdoc] (this feature is autoloaded)
* {Login}[rdoc-ref:doc/login.rdoc]
* {Logout}[rdoc-ref:doc/logout.rdoc]
* {Change Password}[rdoc-ref:doc/change_password.rdoc]
* {Change Login}[rdoc-ref:doc/change_login.rdoc]
* {Reset Password}[rdoc-ref:doc/reset_password.rdoc]
* {Create Account}[rdoc-ref:doc/create_account.rdoc]
* {Close Account}[rdoc-ref:doc/close_account.rdoc]
* {Verify Account}[rdoc-ref:doc/verify_account.rdoc]
* {Remember}[rdoc-ref:doc/remember.rdoc]
* {Lockout}[rdoc-ref:doc/lockout.rdoc]

Since the auth block methods work the same way for each of these
features, they are not documented on the feature pages. Additionally,
all features have a before auth method (e.g. before_login) that is
called before either the GET or POST route blocks are handled.

=== With Multiple Configurations

Rodauth supports using multiple rodauth configurations in the same
application.  You just need to load the plugin a second time,
providing a name for any alternate configuration:

  plugin :rodauth do
  end
  plugin :rodauth, :name=>:secondary do
  end

Then in your routing code, any time you call rodauth, you can provide
the name as an argument to use that configuration:

  route do |r|
    r.on 'secondary' do
      r.rodauth(:secondary)
    end

    r.rodauth
  end

=== With Password Hashes Inside the Accounts Table

You can use Rodauth if you are storing password hashes in the same
table as the accounts.  You just need to specify which column
stores the password hash:

  plugin :rodauth do
    account_password_hash_column :password_hash
  end

When this option is set, Rodauth will do the password hash check
in ruby.
  
=== When Using PostgreSQL without Database Functions

If you want to use Rodauth on PostgreSQL without using database
functions for authentication, but still storing password hashes
in a separate table, you can do so:

  plugin :rodauth do
    use_database_authentication_functions? false
  end

Conversely, if you implement the rodauth_get_salt and
rodauth_valid_password_hash functions on a non-PostgreSQL database,
you can set the value of this setting to true.

=== With Custom Authentication (such as LDAP)

You can use Rodauth with other authentication types, by overriding
a single configuration setting.  For example, if you have accounts
stored in the database, but authentication happens via LDAP, you
can use the +simple_ldap_authenticator+ library:

  require 'simple_ldap_authenticator'
  plugin :rodauth do
    enable :login, :logout
    require_bcrypt? false
    password_match? do |password|
      SimpleLdapAuthenticator.valid?(account.username, password)
    end
  end

If you aren't storing accounts in the database, but want to allow
any valid LDAP user to login, you can do something like this:

  require 'simple_ldap_authenticator'
  plugin :rodauth do
    enable :login, :logout

    # Don't require the bcrypt library, since using LDAP for auth
    require_bcrypt? false

    # Treat the login itself as the account
    account_from_login{|l| l.to_s}

    # Use the login provided as the session value
    account_session_value{account}

    # Store session value in :login key, since the :account_id
    # default wouldn't make sense
    session_key :login

    password_match? do |password|
      SimpleLdapAuthenticator.valid?(account, password)
    end
  end

Note that when using custom authentication, using some of Rodauth's
features such as change login and change password either would not
make sense or would require some additional custom configuration.
The login and logout features should work correctly with the examples
above, though.

=== With Other Web Frameworks

You can use Rodauth even if your application does not use the Roda web
framework.  This is possible by adding a Roda middleware that uses
Rodauth:

  require 'roda'

  class RodauthApp < Roda
    plugin :middleware
    plugin :rodauth do
      enable :login
    end

    route do |r|
      r.rodauth
      r.redirect('/login') unless rodauth.logged_in?
    end
  end

  use RodauthApp

For an example of integrating Rodauth into a real application, see
{this example integrating Rodauth into Ginatra, a Sinatra-based git repository viewer}[https://github.com/jeremyevans/ginatra/commit/5a1dd5f3fa84333275088fb29b979e6fba087c22].

=== Using External Features

The enable configuration method is able to load features external to
Rodauth.  You need to place the external feature file where it can be
required via rodauth/features/feature_name. That file should
use the following basic structure

  module Rodauth
    # :feature_name will be the argument given to enable to
    # load the feature
    FeatureName = Feature.define(:feature_name) do
      auth_value_methods # one argument per auth value method
      auth_methods # one argument per auth method

      get_block do |r, auth|
        # r is the RodaRequest instance
        # auth is the Rodauth::Auth instance
        # This block is evaluated in the scope of the Roda instance
        # ...
      end

      post_block do |r, auth|
        # ...
      end

      # define the default behavior for the auth methods
      # and auth value methods
      # ...
    end
  end

=== Overriding Route-Level Behavior

All of Rodauth's configuration methods change the behavior of the
Rodauth::Auth instance.  However, in some cases you may want to
overriding handling at the routing layer.  You can do this easily
by adding an appropriate route before calling +r.rodauth+:

  route do |r|
    r.post 'login' do
      # Custom POST /login handling here
    end

    r.rodauth
  end

== Upgrading from 0.9.x

To upgrade from 0.9.x to the current version, if you were using
the account_valid_password database function, you need to drop
it and add the two database functions listed in the migration
section above.  You can add the following code to a migration to
accomplish that:

  require 'rodauth/migrations'
  run "DROP FUNCTION account_valid_password(int8, text);"
  Rodauth.create_database_authentication_functions(self)
  Rodauth.set_database_authentication_function_permissions(self)

== Similar Projects

All of these are Rails-specific:

* Devise
* Authlogic
* Sorcery

== Author

Jeremy Evans <code@jeremyevans.net>
